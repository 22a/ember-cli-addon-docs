{{docs-hero
  logo='ember-cli'
  slim-heading='Addon'
  strong-heading='Docs'
  byline='Primitives and patterns to help you document your addon'}}

<div class='docs-container docs-md'>
  <section class='docs-section'>
    <h2>Philosophy</h2>
    <aside>Looking for the quickstart? <a href='#'>Click here.</a></aside>
    <p>Documenting software libraries has been getting easier. We have nicely-formatted README.md files, the ability to host custom sites for free on GitHub Pages, and even dedicated tools like <a href="#">GitBook</a> and <a href="#">ReadTheDocs</a>. But while these tools have come a long way, so have developer expectations, and library authors can quickly find themselves juggling more tasks than can manage.</p>
    <p>Ember addons occupy a unique space here. Besides everything that's expected of any modern JavaScript library, there's even more that goes into authoring a library that plays nicely with an ecosystem as mature as Ember's. And too often addon authors with limited time must choose between being a better community citizen, or focusing on the core problem their library was created to solve in the first place.</p>
    <p>These days, a well-maintained Ember addon should</p>
    <ul>
      <li><strong>Provide interactive demos of their components</strong> in the context of an Ember app</li>
      <li><strong>Show current <em>and versioned</em> guides,</strong> ideally whose content is verified by automated tests</li>
      <li><strong>Show current <em>and versioned</em> API documentation</strong> derived from structured comments in source code</li>
      <li><strong>Have excellent test coverage</strong> across a matrix of Ember and Ember CLI versions</li>
      <li><strong>Make it easy for contributors to correct documentation errors</strong> in addition to submitting code fixes</li>
    </ul>
    <p>Looking at the available tools for authoring docs, none proved satisfactory for all these needs. This is why addons deserve their own solution.</p>
    <p>Looking at a survey of several popular addon sites, we've seen some common needs:</p>
    <ul>
      <li>Guides (versioned)</li>
      <li>API documentation, versioned, and ideally generated automatically from YUIDOC comments in the source code.</li>
    </ul>
    <p>We want addon authors to (a) be encouraged to document their addons, (b) fall into success around several common problems (things like how to write & deploy versioned guides). These things are nontrivial and we want to take our collective wisdom and provide good solutions here.</p>
    <p>We want to strike a good balance between providing a productive starting point, and giving addon authors useful primitives so they can still inject their unique personality and needs into their addon doc sites.</p>
    <p>We put thought into the nav layout. It works on mobile and desktop, its flexible enough to support a variety of addon authors' needs. The tree view accommodates an arbitrary number of sections. The search allows for quick reference.</p>
    <p>Don't want everyone to recreate layout, nav, organization. Where do guides go? Addons? Community? Version selectors? Too many questions.</p>
  </section>

  <section class='docs-section'>
    <h2>Features</h2>
    <p>Current features:</p>
    <ul>
      <li>App scaffold</li>
      <li>Navigation primtiives</li>
      <li>Autogenerate API docs from YUIDOC comments, along with container components for this</li>
    </ul>
    <p>Upcoming features:</p>
    <ul>
      <li>Interactive component widget</li>
    </ul>
  </section>

  <section class='docs-section'>
    <h2>Boilerplate</h2>
    <p>The site you're viewing right now is an example of an Ember app made using Ember CLI Addon Docs. Be sure to <a href="">check out the repo</a> for all the details.</p>
    <p>We also provide a generator to get you started. If you've just installed Ember CLI Addon Docs, you can run</p>
    <pre>
      ember g ember-cli-addon-docs
    </pre>
    <p>and you'll have a boilerplate site ready to start filling out.</p>
  </section>
</div>
